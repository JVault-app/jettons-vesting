// BASIC
// https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb

_ = Null;

bool_false$0 = Bool;
bool_true$1 = Bool;

nothing$0 {X:Type} = Maybe X;
just$1 {X:Type} value:X = Maybe X;

left$0 {X:Type} {Y:Type} value:X = Either X Y;
right$1 {X:Type} {Y:Type} value:Y = Either X Y;

addr_none$00 = MsgAddressExt;
addr_extern$01 len:(## 9) external_address:(bits len)
             = MsgAddressExt;
anycast_info$_ depth:(#<= 30) { depth >= 1 }
   rewrite_pfx:(bits depth) = Anycast;
addr_std$10 anycast:(Maybe Anycast)
   workchain_id:int8 address:bits256  = MsgAddressInt;
addr_var$11 anycast:(Maybe Anycast) addr_len:(## 9)
   workchain_id:int32 address:(bits addr_len) = MsgAddressInt;
_ _:MsgAddressInt = MsgAddress;
_ _:MsgAddressExt = MsgAddress;

var_uint$_ {n:#} len:(#< n) value:(uint (len * 8))
         = VarUInteger n;
var_int$_ {n:#} len:(#< n) value:(int (len * 8))
        = VarInteger n;
nanograms$_ amount:(VarUInteger 16) = Grams;

_ grams:Grams = Coins;

optional_nothing$_ {X: Type} = Optional X;
optional_something$_ {X: Type} value:X = Optional X;

// =======================================================================
// jettons

jetton_transfer_notification#7362d09c {Payload: Type}
    query_id:uint64
    amount:Coins
    sender:MsgAddress
    forward_payload:(Either Payload ^Payload)
= JettonTransferNotificationMsg Payload;

transfer#0f8a7ea5 {Payload: Type}
    query_id:uint64
    amount:Coins
    destination:MsgAddress
    response_destination:MsgAddress
    custom_payload:(Maybe ^Cell)
    forward_ton_amount:Coins
    forward_payload:(Either Payload ^Payload)
= JettonTransferMsg Payload;

burn#595f07bc
  query_id:uint64
  amount:Coins
  response_destination:MsgAddress
  custom_payload:(Maybe ^Cell)
= JettonBurnMsg;

provide_wallet_address#2c76b973
    query_id:uint64
    owner_address:MsgAddress
    include_address:Bool
= ProvideWalletMsg;

take_wallet_address#d1735400
    query_id:uint64
    wallet_address:MsgAddress
    owner_address:(Maybe ^MsgAddress)
= TakeWalletMsg;

// =======================================================================

// factory.fc & jetton_vesting.fc storages

factory_storage#_
    admin_address:MsgAddress
    next_item_index:uint128
    creation_fee:Coins
    jetton_vesting_code:^Cell
    content:(Maybe ^Cell)
= FactoryStorage;

jetton_vesting_storage#_
    factory_address:MsgAddress
    index:uint128
    owner_address:MsgAddress
    jetton_minter_address:MsgAddress
    content:(Maybe ^Cell)
    _:^[
        jetton_wallet_address:MsgAddress
        factory_jetton_wallet:MsgAddress
        locked_jettons:Coins  // amount of locked jettons
        jettons_locked:Bool  // were jettons locked?
        claimed_times:uint32
        claimed_jettons:Coins
        first_unlock_time:uint32
        first_unlock_size:uint32
        cycle_length:uint32
        cycles_number:uint32
    ]
= JettonVestingStorage;

// =======================================================================

// Jetton Vesting initialization:

// 1.
// Чтобы заблокировать жетоны, пользователь должен их отправить на адрес Factory,
// приложив к jetton_notify не менее `creation_fee` + `gas::create_vesting` TON
// со следующим Payload:
lock_jettons_user_payload#_
    jetton_minter_address:MsgAddress
    jettons_owner_address:MsgAddress
    first_unlock_time:uint32
    first_unlock_size:uint32
    cycle_length:uint32
    cycles_number:uint32
    content:(Maybe ^Cell)
= LockJettonsUserPayload;

// Сообщение, которое приходит на адрес Factory:
lock_jettons_user_request$_ _:(JettonTransferNotificationMsg LockJettonsUserPayload) = InternalMsgBody;

// 2.
// Далее, если проверка успешная, то Factory резервирует `creation_fee` TON на своем балансе
// и деплоит контракт Jetton Vesting со следующими данными:
vesting_sbt_init_data#_
    factory_address:MsgAddress
    sbt_item_index:uint128
= VestingSbtInitData;

vesting_sbt_init_message#d80dee82
    query_id:uint64
    owner_address:MsgAddress
    jetton_minter_address:MsgAddress
    factory_jetton_wallet:MsgAddress
    locked_jettons:Coins
    content:(Maybe ^Cell)
    _:^[
        first_unlock_time:uint32
        first_unlock_size:uint32
        cycle_length:uint32
        cycles_number:uint32
    ]
= InternalMsgBody;
// Вместе с успешной отправкой сообщения, на контракте Factory увеличивается значение next_item_index.
// Если произошла какая-то ошибка, то Factory совершает попытку возврата жетонов отправителю

// 3.
// Во время деплоя на контракте Jetton Vesting проверяется, что сообщение пришло от Factory,
// и в случае успешной покупки, для получения `jetton_wallet_address` отправляется транзакция
// на адрес `jetton_minter_address`, указанный Factory:
request_address_message#_ _:ProvideWalletMsg = InternalMsgBody;

// В ответ приходит сообщение от минтера:
report_address_message#_ _:TakeWalletMsg = InternalMsgBody;

// 4.
// После получения TakeWalletMsg, на контракте Jetton Vesting проверяется, что отправитель корректный,
// контракт инициализирован с помощью Factory (`init` == true), а `jetton_wallet_address` еще не был
// установлен (== null). Если проверка успешна, то устанавливается полученный `jetton_wallet_address`,
// а на адрес Factory отправляется сообщение о завершении инициализации Jetton Vesting со следующим Payload:
confirm_initialization_message#e9bfea7f
    query_id:uint64
    item_index:uint128
    factory_jetton_wallet:MsgAddress
    jettons_to_lock:Coins  // == storage::locked_jettons
    sbt_owner_address:MsgAddress
= InternalMsgBody;

// 5.
// После получения сообщения о подтверждении инициализации Jetton Vesting, на контракте Factory
// проверяется, что сообщение пришло от корректного отправителя, и в случае успешной проверки
// на контракт Jetton Vesting отправляются жетоны без Payload, с `forward_ton_amount` = `gas::complete_lock`
lock_jettons_message#_ _:(JettonTransferMsg Null) = InternalMsgBody;

// 6.
// После получения transfer notification, на контракте Jetton Vesting проверяется
//   1) соответствие отправителя JettonTransferNotificationMsg (sender == jetton_wallet_address)
//   2) соответствие отправителя жетонов (from_address == factory_address)
// В случае успешной проверки устанавливается `jettons_locked` = true и отправляются excesses:
excesses_message#d53276db query_id:uint64 = InternalMsgBody;
// Иначе, совершается попытка возврата жетонов отправителю
returned_jettons_message#_ _:(JettonTransferMsg bits) = InternalMsgBody;

// =======================================================================

// Owner's interaction with Jetton Vesting:

// Во время всех нижеперечисленных транзакций на контракте Jetton Vesting выполняется проверка того,
// что сообщения были отправлены владельцем контракта и инициализация Jetton Vesting завершена
// (`init` == true, `jetton_wallet_address` != null())

// 1.
// Владелец может заклеймить жетоны со смарт-контракта, когда подошло время их разблокировки.
// Для этого он должен отправить следующее сообщение:
claim_message#a769de27 query_id:uint64 = InternalMsgBody;

// После его получения проверяется, что количество полученных TON >= `gas::send_jettons`,
// и количество разблокированных жетонов > 0. Если проверка успешная, то пользователю отправляются
// разблокированные жетоны, а на контракте устанавливаются
//  1) `claimed_times` = `total_unlocks` (кол-во пройденных циклов вестинга + 1 изначальный разлок)
//  2) `claimed_jettons` = `claimed_jettons` + available_jettons
// Eсли `claimed_times` == `cycles_number` + 1, то вместо `owner_address` устанавливается `addr_none`,
// а вместе с разблокированными жетонами отправляется весь баланс контракта.
claimed_jettons_message#_ _:(JettonTransferMsg bits) = InternalMsgBody;

// 2.
// Владелец может сжечь токены, находящиеся на контракте вестинга вне зависимости от того, разблокированы они или нет.
// Для этого он должен отправить сообщение
burn_jettons_request_message#6c24f413
    query_id:uint64
    jettons_to_burn:Coins
= InternalMsgBody;

// После получения этого сообщения проверяется, что количество полученных TON >= `gas::burn_jettons`,
// и количество жетонов на контракте не меньше `jetton_to_burn`.
// В случае успешной проверки отправляется сообщение для сжигания жетонов:
burn_jettons_message#_ _:JettonBurnMsg = InternalMsgBody;
// Кроме этого, меняются данные контракта:
//  1) Если `jettons_to_burn` == `max_jettons_to_burn`, то `owner_address` := `addr_none`
//  2) Если `jettons_to_burn` < `max_jettons_to_burn`, то
//     - `claimed_jettons` := `claimed_jettons` * (`locked_jettons` - `jettons_to_burn`) / `locked_jettons`
//     - `locked_jettons` := `locked_jettons` - `jettons_to_burn`

// 3.
// Владелец может вывести жетоны, отправленные на контракт по ошибке, для этого он отправляет сообщение
withdraw_jettons_message#11c09682
    query_id:uint64
    requested_wallet_address:MsgAddress
    jetton_amount:Coins
= InternalMsgBody;

// После этого сообщения проверяется, что `requested_wallet_address` != `jetton_wallet_address` || now() > last_unlock_time,
// В случае успешный проверки, владельцу отправляются жетоны:
withdrawed_jettons_message#_ _:(JettonTransferMsg bits) = InternalMsgBody;
