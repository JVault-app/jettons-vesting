#pragma version >=0.4.0;
#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";


global int   storage::init?;
global slice storage::factory_address;       ;; address of the factory that deployed this contract (MsgAddress)
global int   storage::index; 

global slice storage::owner_address;         ;; owner of the locked jettons (MsgAddress)
global slice storage::jetton_wallet_address; ;; jetton wallet address of this contract (MsgAddress)
global slice storage::jetton_minter_address; ;; jetton minter address (MsgAddress)
global cell  storage::content;

global slice storage::factory_jetton_wallet; ;; address of factory's jetton wallet from which jettons are transferred (MsgAddress)
global int   storage::locked_jettons;        ;; total locked jettons (coins)
global int   storage::jettons_locked?;       ;; were jettons already transferred to this smc? (bool)
global int   storage::claimed_times;         ;; number of unlocks withdrawed jettons (uint32)
global int   storage::claimed_jettons;       ;; total amount of withdrawed jettons (coins)
global int   storage::first_unlock_time;     ;; timestamp of the first unlock (uint32)
global int   storage::first_unlock_size;     ;; size of the first unlock in percents (uint32)
global int   storage::cycle_length;          ;; time between unlocks in seconds (uint32)
global int   storage::cycles_number;         ;; number of unlocks excluding initial (ubool6)


() load_data() impure inline {
    slice ds = get_data().begin_parse();  ;; bits = 267 + 128 + 267 + 267 + 1 = 930; refs = 2;

    storage::index                 = ds~load_uint(128);
    storage::factory_address       = ds~load_msg_addr();
    storage::init? = false;

    ifnot (ds.slice_empty?()) {
        storage::init? = true;
        storage::owner_address         = ds~load_msg_addr();
        storage::jetton_minter_address = ds~load_msg_addr();
        storage::content               = ds~load_maybe_ref();

        slice internal_ds = ds~load_ref().begin_parse();  ;; 267 + 267 + 124 + 1 + 16 + 124 + 32 + 32 + 32 + 16 = 911; refs = 0;
        storage::jetton_wallet_address = internal_ds~load_msg_addr();
        storage::factory_jetton_wallet = internal_ds~load_msg_addr();
        storage::locked_jettons        = internal_ds~load_coins();
        storage::jettons_locked?       = internal_ds~load_int(1);
        storage::claimed_times         = internal_ds~load_uint(16);
        storage::claimed_jettons       = internal_ds~load_coins();
        storage::first_unlock_time     = internal_ds~load_uint(32);
        storage::first_unlock_size     = internal_ds~load_uint(32);
        storage::cycle_length          = internal_ds~load_uint(32);
        storage::cycles_number         = internal_ds~load_uint(16);

        internal_ds.end_parse();
    }

    ds.end_parse();
}


() save_data() impure {
    set_data(
            begin_cell()
                .store_uint(storage::index, 128)
                .store_slice(storage::factory_address)
                .store_slice(storage::owner_address)
                .store_slice(storage::jetton_minter_address)
                .store_maybe_ref(storage::content)
                .store_ref(
                    begin_cell()
                        .store_slice(storage::jetton_wallet_address)
                        .store_slice(storage::factory_jetton_wallet)
                        .store_coins(storage::locked_jettons)
                        .store_int(storage::jettons_locked?, 1)
                        .store_uint(storage::claimed_times, 16)
                        .store_coins(storage::claimed_jettons)
                        .store_uint(storage::first_unlock_time, 32)
                        .store_uint(storage::first_unlock_size, 32)
                        .store_uint(storage::cycle_length, 32)
                        .store_uint(storage::cycles_number, 16)
                    .end_cell()
                )
            .end_cell()
    );
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    load_data();
    if (flags & 1) { ;; route all prove_ownership bounced messages to owner
        ;; first op was 0xffffffff, because of bounced, now we need to read real one
        int op = in_msg_body~load_uint(32);
        if (op == op::ownership_proof) {
            int query_id = in_msg_body~load_uint(64);
            send_builder_message(storage::owner_address, 0, begin_cell().store_uint(op::ownership_proof_bounced, 32).store_uint(query_id, 64), mode::carry_remaining_gas);
        }
        return ();
    }
    
    int op = in_msg_body.slice_bits() >= 32 ? in_msg_body~load_uint(32) : 0;
    int query_id = in_msg_body.slice_bits() >= 64 ? in_msg_body~load_uint(64) : cur_lt();

    if (op == op::initialize) {
        throw_if(exc::already_inited, storage::init?);
        throw_unless(405, equal_slices(sender_address, storage::factory_address));
        
        storage::owner_address         = in_msg_body~load_msg_addr();
        storage::jetton_minter_address = in_msg_body~load_msg_addr();
        storage::jetton_wallet_address = null_addr();
        storage::factory_jetton_wallet = in_msg_body~load_msg_addr();
        storage::locked_jettons        = in_msg_body~load_coins();
        storage::jettons_locked?       = false;
        storage::claimed_times         = 0;
        storage::claimed_jettons       = 0;
        storage::content               = in_msg_body~load_maybe_ref();

        in_msg_body = in_msg_body~load_ref().begin_parse();
        storage::first_unlock_time     = in_msg_body~load_uint(32);
        storage::first_unlock_size     = in_msg_body~load_uint(32);
        storage::cycle_length          = in_msg_body~load_uint(32);
        storage::cycles_number         = in_msg_body~load_uint(16);

        builder msg_body = begin_cell()
                            .store_uint(op::provide_wallet_address, 32)
                            .store_uint(query_id, 64)
                            .store_slice(my_address())
                            .store_uint(0, 1);

        send_builder_message(storage::jetton_minter_address, msg_value - min_tons_for_storage, msg_body, mode::simple);

        save_data();
        return ();
    }

    throw_unless(exc::not_inited, storage::init?);

    if (op == op::take_wallet_address) {
        throw_unless(exc::already_inited, equal_slices(storage::jetton_wallet_address, null_addr()));
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::jetton_minter_address));
        
        storage::jetton_wallet_address = in_msg_body~load_msg_addr();

        builder msg_body = begin_cell()
                            .store_uint(op::confitm_initialization, 32)
                            .store_uint(query_id, 64)
                            .store_uint(storage::index, 128)
                            .store_slice(storage::factory_jetton_wallet)
                            .store_coins(storage::locked_jettons)
                            .store_slice(storage::owner_address);
        send_cell_message(storage::factory_address, 0, msg_body.end_cell(), mode::carry_remaining_gas);

        save_data();
        return ();
    }

    throw_if(exc::address_not_set, null?(storage::jetton_wallet_address));

    if (op == op::transfer_notification) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        
        try {
            throw_unless(exc::incorrect_sender, equal_slices(from_address, storage::factory_address));            
            ifnot (equal_slices(sender_address, storage::jetton_wallet_address)) {  ;; fake transfer notification 
                return (); 
            }

            storage::jettons_locked? = true;
            storage::locked_jettons = jetton_amount;
            send_builder_message(storage::owner_address,0, begin_cell().store_uint(op::ownership_assigned_nft, 32).store_uint(query_id, 64).store_uint(0, 3),mode::carry_remaining_gas);
            save_data();
        }
        catch (_, n) {
            send_jettons(query_id, jetton_amount, from_address, from_address, sender_address, 0, mode::carry_remaining_gas,
                         1, begin_cell().store_uint(0, 32).store_slice("Error. Code ").store_number10(n).end_cell());
        }

        return ();
    }

    if (op == op::claim) {
        throw_unless(exc::incorrect_sender, equal_slices(storage::owner_address, sender_address));
        throw_unless(exc::not_unlocked_yet, now() > storage::first_unlock_time);
        throw_unless(exc::not_enough_ton, msg_value >= gas::send_jettons);
        
        int total_unlocks = min(storage::cycles_number, (now() - storage::first_unlock_time) / storage::cycle_length);
        int available_percent = storage::first_unlock_size + muldiv(total_unlocks, percent_devider - storage::first_unlock_size, storage::cycles_number);
        int available_jettons = muldiv(storage::locked_jettons, available_percent, percent_devider) - storage::claimed_jettons;
        int sending_mode = mode::carry_remaining_gas;
        if (total_unlocks == storage::cycles_number) {
            sending_mode = mode::carry_remaining_balance;
            storage::owner_address = null_addr();
        }
        
        throw_unless(exc::nothing_to_claim, available_jettons > 0);

        send_jettons(query_id, available_jettons, sender_address, sender_address, storage::jetton_wallet_address, 0, sending_mode,
                     1, begin_cell().store_uint(0, 32).store_slice("Jettons unlock #").store_number10(total_unlocks + 1).end_cell()); 
        
        storage::claimed_times = total_unlocks + 1; 
        storage::claimed_jettons += available_jettons;
        save_data();
        return ();
    }

    if (op == op::burn_locked_jettons) {
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::owner_address));
        throw_unless(exc::not_enough_ton, msg_value >= gas::burn_jettons);

        int max_jettons_to_burn = storage::locked_jettons - storage::claimed_jettons;
        int jettons_to_burn = in_msg_body.slice_empty?() ? max_jettons_to_burn : in_msg_body~load_coins();
        if (jettons_to_burn == max_jettons_to_burn) {
            burn_jettons(query_id, jettons_to_burn, storage::jetton_wallet_address, storage::owner_address, 0, mode::carry_remaining_balance);
            storage::owner_address = null_addr();
        }
        elseif (jettons_to_burn < max_jettons_to_burn) {
            burn_jettons(query_id, jettons_to_burn, storage::jetton_wallet_address, storage::owner_address, 0, mode::carry_remaining_balance);
            storage::locked_jettons -= jettons_to_burn;
        }
        else {
            throw(exc::not_enough_jettons);
        }

        save_data();
        return ();
    }

    if (op == op::withdraw_jetton) {
        throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::owner_address));
        slice requested_wallet_address = in_msg_body~load_msg_addr();
        throw_if(exc::incorrect_jetton, equal_slices(requested_wallet_address, storage::jetton_wallet_address));
        int jetton_amount = in_msg_body~load_coins();
        send_jettons(query_id, jetton_amount, sender_address, sender_address, requested_wallet_address, 0, mode::carry_remaining_gas,
                     0, begin_cell().store_uint(0, 32).store_slice("Jettons withdrawed").end_cell());
        return ();
    }

    ;; Default SBT start
    if (op == op::request_owner) {
        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_int(1);
        var msg = begin_cell()
                    .store_uint(op::owner_info, 32)
                    .store_uint(query_id, 64)
                    .store_uint(storage::index, 256)
                    .store_slice(sender_address)
                    .store_slice(storage::owner_address)
                    .store_ref(body)
                    .store_uint(0, 64);
        msg = with_content ? msg.store_maybe_ref(storage::content) : msg.store_int(0, 1);
        send_cell_message(dest, 0, msg.end_cell(), mode::carry_remaining_gas);
        return ();
    }

    if (op == op::prove_ownership) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));
        slice dest = in_msg_body~load_msg_addr();
        cell body = in_msg_body~load_ref();
        int with_content = in_msg_body~load_uint(1);
        var msg = begin_cell()
                    .store_uint(op::ownership_proof, 32)
                    .store_uint(query_id, 64)
                    .store_uint(storage::index, 256)
                    .store_slice(storage::owner_address)
                    .store_ref(body)
                    .store_uint(0, 64);  ;; revoked_at
        msg = with_content ? msg.store_maybe_ref(storage::content) : msg.store_int(0, 1);
        send_cell_message(dest, 0, msg.end_cell(), mode::carry_remaining_gas);
        return ();
    }

    if (op == op::get_static_data) {
        var msg = begin_cell()
                    .store_uint(op::report_static_data, 32)
                    .store_uint(query_id, 64)
                    .store_uint(storage::index, 256)
                    .store_slice(storage::factory_address);
        send_cell_message(sender_address, 0, msg.end_cell(), mode::carry_remaining_gas);
        return ();
    }

    if (op == op::take_excess) {
        throw_unless(401, equal_slices(storage::owner_address, sender_address));
        ;; reserve amount for storage
        raw_reserve(min_tons_for_storage, 0);
        send_builder_message(sender_address, 0, begin_cell().store_uint(op::excesses, 32).store_uint(query_id, 64), mode::carry_remaining_balance);
        return ();
    }


    if (op == op::transfer) {
        throw(413);
    }

    throw(0xffff);
    ;; default SBT end
}


;;
;;  GET Methods
;;
(int, int, slice, slice, cell) get_nft_data() method_id {
    load_data();
    
    if (storage::init?) {
        int burned = false;
        int available_jettons = 0;
        if (equal_slices(storage::owner_address, null_addr())) {
            burned = true;
        }
        elseif (now() > storage::first_unlock_time) {
            int total_unlocks = min(storage::cycles_number, (now() - storage::first_unlock_time) / storage::cycle_length);
            int available_percent = storage::first_unlock_size + muldiv(total_unlocks, percent_devider - storage::first_unlock_size, storage::cycles_number);
            available_jettons = muldiv(storage::locked_jettons, available_percent, percent_devider) - storage::claimed_jettons;
        }
        slice content_cs = storage::content.begin_parse();
        cell dict_content = content_cs~load_ref();

        (slice decimals_slice, int success) = dict_content~udict_delete_get?(256, "decimals"H);
        decimals_slice = decimals_slice~load_ref().begin_parse();
        int decimals = 9;
        if (success) {
            decimals = decimals_slice~load_uint(8);
        }
        int one_jetton = 1;
        repeat (decimals) {
            one_jetton *= 10;
        }

        (slice symbol, success) = dict_content~udict_delete_get?(256, "symbol"H);
        ifnot (success) {
            symbol = "tokens";
        } else {
            symbol = symbol~load_ref().begin_parse();
            symbol~skip_bits(8);
        }

        builder sbt_name = begin_cell().store_uint(0,8).store_str_jettons(storage::locked_jettons, one_jetton, symbol).store_slice(" locked on JVault.app");
        if (burned) {
            sbt_name = sbt_name.store_slice(" (burned)");
        }
        
        builder sbt_descriprion = begin_cell()
                                .store_uint(0, 8)  ;; snake format prefix
                                .store_slice("Initially locked: ")
                                .store_str_jettons(storage::locked_jettons, one_jetton, symbol)
                                .store_uint(10, 8)  ;; store '\n' (newline)
                                .store_slice("Withdrawed: ")
                                .store_str_jettons(storage::claimed_jettons, one_jetton, symbol)
                                .store_uint(10, 8);  ;; store '\n' (newline)

        builder description_inner_cell = begin_cell()
                                            .store_slice("Available to withdraw: ")
                                            .store_str_jettons(available_jettons, one_jetton, symbol)
                                            .store_uint(10, 8)  ;; store '\n' (newline)
                                            .store_uint(10, 8)  ;; store '\n' (newline)
                                            .store_slice("First unlock timestamp: ")
                                            .store_number10(storage::first_unlock_time)
                                            .store_uint(10, 8)  ;; store '\n' (newline)
                                            .store_slice("First unlock size: ")
                                            .store_str_float(storage::first_unlock_size, percent_devider / 100)
                                            .store_uint(37, 8);  ;; store '%' (percent symbol)
        if (storage::cycles_number) {
            description_inner_cell = description_inner_cell.store_ref(
                begin_cell()
                    .store_uint(10, 8)  ;; store '\n' (newline);
                    .store_slice("Vesting cycles number: ")
                    .store_uint(10, 8)  ;; store '\n' (newline);
                    .store_number10(storage::cycles_number)
                    .store_uint(10, 8)  ;; store '\n' (newline);
                    .store_slice("Vesting cycle length: ")
                    .store_number10(storage::cycle_length / ONE_DAY)
                    .store_slice("days")
                .end_cell()
            );
        }
        sbt_descriprion = sbt_descriprion.store_ref(description_inner_cell.end_cell());

        dict_content~udict_set(256, "name"H, begin_cell().store_ref(sbt_name.end_cell()).end_cell().begin_parse());
        dict_content~udict_set(256, "description"H, begin_cell().store_ref(sbt_descriprion.end_cell()).end_cell().begin_parse());
        return (storage::init?, 0, null_addr(), storage::owner_address, begin_cell().store_uint(0, 8).store_dict(dict_content).end_cell());
    }
        
    return (storage::init?, 0, null_addr(), storage::owner_address, storage::content);
}

slice get_authority_address() method_id {
    return null_addr();
}

int get_revoked_time() method_id {
    return 0;
}


(int, slice, int, slice, slice, slice, cell, slice, int, int, int, int, int, int, int, int) get_storage_data() method_id {
    load_data();

    return (
        storage::init?,
        storage::factory_address,
        storage::index,
        storage::owner_address,
        storage::jetton_minter_address,
        storage::jetton_wallet_address,
        storage::content,
        storage::factory_jetton_wallet,
        storage::locked_jettons,
        storage::jettons_locked?,
        storage::claimed_times,
        storage::claimed_jettons,
        storage::first_unlock_time,
        storage::first_unlock_size,
        storage::cycle_length,
        storage::cycles_number
    );      
}
