#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/utils.fc";


global slice storage::admin_address;
global int   storage::next_item_index;
global int   storage::creation_fee;
global cell  storage::jetton_vesting_codes;
global cell  storage::collection_content;
global int   storage::version;


() load_data() impure inline {
    slice ds = get_data().begin_parse();  ;; bits = 267 + 128 + 124 + 1 = 520; refs = 2;

    storage::admin_address        = ds~load_msg_addr();
    storage::next_item_index      = ds~load_uint(128);
    storage::creation_fee         = ds~load_coins();
    storage::jetton_vesting_codes = ds~load_dict();
    storage::collection_content   = ds~load_dict();
    storage::version              = ds~load_uint(8);
}

() save_data() impure inline {
    set_data(
        begin_cell()
            .store_slice(storage::admin_address)
            .store_uint(storage::next_item_index, 128)
            .store_coins(storage::creation_fee)
            .store_dict(storage::jetton_vesting_codes)
            .store_dict(storage::collection_content)
            .store_uint(storage::version, 8)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::transfer_notification) {  ;; someone sent jettons to this smc
        int   jetton_amount = in_msg_body~load_coins();
        slice from_address  = in_msg_body~load_msg_addr();

        try {
            throw_unless(exc::not_enough_ton, msg_value >= storage::creation_fee + gas::create_vesting);
            raw_reserve(storage::creation_fee, 4);
            slice payload = in_msg_body~load_ref().begin_parse();
            slice jetton_minter_address = payload~load_msg_addr();
            slice vesting_owner_address = payload~load_msg_addr();
            int   first_unlock_time     = payload~load_uint(32);
            int   first_unlock_size     = payload~load_uint(32);
            int   cycle_length          = payload~load_uint(32);
            int   cycles_number         = payload~load_uint(32);
            cell  content               = payload~load_maybe_ref();

            cell msg_body = begin_cell()
                                .store_uint(op::initialize, 32)
                                .store_uint(query_id, 64)
                                .store_slice(vesting_owner_address)
                                .store_slice(jetton_minter_address)
                                .store_slice(sender_address)
                                .store_coins(jetton_amount)
                                .store_maybe_ref(content)
                                .store_ref(
                                    begin_cell()
                                        .store_uint(first_unlock_time, 32)
                                        .store_uint(first_unlock_size, 32)
                                        .store_uint(cycle_length, 32)
                                        .store_uint(cycles_number, 32)
                                    .end_cell()   
                                )
                            .end_cell();

            (_, slice jetton_vesting_code, _) = storage::jetton_vesting_codes.udict_get_max?(128);
            cell state_init = calculate_nft_item_state_init(storage::next_item_index, jetton_vesting_code, my_address(), 128);
            slice jetton_vesting_address = get_address_by_state_init(state_init);

            send_deploy_message(jetton_vesting_address, 0, state_init, msg_body, mode::carry_remaining_balance);
            storage::next_item_index += 1;
            save_data();
            return ();
        }
        catch (_, n) {
            slice comment = "Incorrect payload";
            if (n == exc::not_enough_ton) {
                comment = "Not enough TON for paying fees";
            }
            send_jettons(query_id, jetton_amount, from_address, from_address, sender_address, 0, mode::carry_remaining_gas,
                         1, begin_cell().store_uint(0, 32).store_slice(comment).end_cell());  
            return ();
        }
    }

    if ((op == op::confirm_initialization) | (op == op::decline_initialization)) {
        int item_index = in_msg_body~load_uint(128);
        (_, slice jetton_vesting_code, _) = storage::jetton_vesting_codes.udict_get_preveq?(128, item_index);
        slice expected_address = get_address_by_state_init(calculate_nft_item_state_init(item_index, jetton_vesting_code, my_address(), 128));
        throw_unless(exc::incorrect_sender, equal_slices(expected_address, sender_address));
        
        slice jetton_wallet_address = in_msg_body~load_msg_addr();
        int   jettons_to_lock       = in_msg_body~load_coins();
        slice vesting_owner_address = in_msg_body~load_msg_addr();
        
        if (op == op::confirm_initialization) {
            send_jettons(query_id, jettons_to_lock, sender_address, vesting_owner_address, jetton_wallet_address,
                         0, mode::carry_remaining_gas, gas::complete_lock, null());
        }
        else {
            send_jettons(query_id, jettons_to_lock, vesting_owner_address, vesting_owner_address, jetton_wallet_address,
                         storage::creation_fee, mode::carry_remaining_gas, 1, begin_cell().store_uint(0, 32).store_slice("Jetton doesn't support TEP-89").end_cell());
        }
        return ();
    }
    
    ;; Admin commands
    throw_unless(exc::incorrect_sender, equal_slices(sender_address, storage::admin_address));
    
    if (op == op::update_vesting_code) {
        storage::jetton_vesting_codes~udict_set(128, storage::next_item_index, in_msg_body);
        
        save_data();
        return ();
    }

    if (op == op::set_code) {
        set_code(in_msg_body~load_ref());
        if (in_msg_body.slice_refs()) {
            set_data(in_msg_body~load_ref());
        }

        return ();
    }

    if (op == op::withdraw_jetton) {  ;; just in case jettons get stuck on this smc 
        slice jetton_to_withdraw = in_msg_body~load_msg_addr();
        int jetton_amount = in_msg_body~load_coins();
        slice recipient = in_msg_body~load_msg_addr();

        send_jettons(query_id, jetton_amount, recipient, recipient, jetton_to_withdraw, 0, mode::carry_remaining_gas,
                     msg_value - 50000000, begin_cell().store_slice(in_msg_body).end_cell());
        return ();
    }

    if (op == op::change_creation_fee) {
        storage::creation_fee = in_msg_body~load_coins();
        builder msg_body = begin_cell()
                                .store_uint(0, 32)
                                .store_slice("Creation fee was changed to ")
                                .store_str_jettons(storage::creation_fee, 1000000000, "TON");
        send_cell_message(storage::admin_address, 0, msg_body.end_cell(), mode::carry_remaining_gas);

        save_data();
        return ();
    }
    
    if (op == op::withdraw_ton) {
        raw_reserve(min_tons_for_storage, 0);
        send_message_with_comment(storage::admin_address, 0, "TON fees withrawal", mode::carry_remaining_balance);
        return ();
    }

    if (op == op::change_content) {
        storage::collection_content = in_msg_body~load_dict();
        send_message_with_comment(storage::admin_address, 0, "Content was changed", mode::carry_remaining_gas);

        save_data();
        return ();
    }
}


;; GET methods


(int, cell, slice) get_collection_data() method_id {
    load_data();
    return (storage::next_item_index, storage::collection_content, storage::admin_address);
}


cell get_nft_content(int index, cell individual_content) method_id {
    return individual_content;
}


slice get_nft_address_by_index(int index) method_id {
    load_data();
    (_, slice jetton_vesting_code, _) = storage::jetton_vesting_codes.udict_get_preveq?(128, index);
    cell state_init = calculate_nft_item_state_init(index, jetton_vesting_code, my_address(), 128);
    return get_address_by_state_init(state_init);
}


(slice, int, int, cell, int) get_storage_data() method_id {
    load_data();
    return (
        storage::admin_address,
        storage::next_item_index,
        storage::creation_fee,
        storage::jetton_vesting_codes,
        storage::version
    );
}
